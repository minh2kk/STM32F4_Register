
STM32CUBEIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000748  08000750  00010750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000748  08000748  00010750  2**0
                  CONTENTS
  4 .ARM          00000000  08000748  08000748  00010750  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000748  08000750  00010750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000748  08000748  00010748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800074c  0800074c  0001074c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010750  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010750  2**0
                  CONTENTS
 10 .bss          00000020  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010750  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000e24  00000000  00000000  00010780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003fa  00000000  00000000  000115a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000110  00000000  00000000  000119a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000c8  00000000  00000000  00011ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000016d5  00000000  00000000  00011b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000144a  00000000  00000000  0001324d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004f96  00000000  00000000  00014697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001962d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002f8  00000000  00000000  00019680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000730 	.word	0x08000730

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000730 	.word	0x08000730

080001e8 <DMA_Init>:
 *      Author: MINH
 */

#include "dma.h"

void DMA_Init(DMA_TypeDef* DMAx, DMA_Config* Config, uint32_t StreamNumber){
 80001e8:	b480      	push	{r7}
 80001ea:	b087      	sub	sp, #28
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	60f8      	str	r0, [r7, #12]
 80001f0:	60b9      	str	r1, [r7, #8]
 80001f2:	607a      	str	r2, [r7, #4]
	uint32_t tmp = 0x00000000;
 80001f4:	2300      	movs	r3, #0
 80001f6:	617b      	str	r3, [r7, #20]
	tmp |= (Config->FlowController<<5);
 80001f8:	68bb      	ldr	r3, [r7, #8]
 80001fa:	6a1b      	ldr	r3, [r3, #32]
 80001fc:	015b      	lsls	r3, r3, #5
 80001fe:	697a      	ldr	r2, [r7, #20]
 8000200:	4313      	orrs	r3, r2
 8000202:	617b      	str	r3, [r7, #20]
	tmp |= (Config->Dir<<6);
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	689b      	ldr	r3, [r3, #8]
 8000208:	019b      	lsls	r3, r3, #6
 800020a:	697a      	ldr	r2, [r7, #20]
 800020c:	4313      	orrs	r3, r2
 800020e:	617b      	str	r3, [r7, #20]
	tmp |= (Config->ModeCircular<<8);
 8000210:	68bb      	ldr	r3, [r7, #8]
 8000212:	69db      	ldr	r3, [r3, #28]
 8000214:	021b      	lsls	r3, r3, #8
 8000216:	697a      	ldr	r2, [r7, #20]
 8000218:	4313      	orrs	r3, r2
 800021a:	617b      	str	r3, [r7, #20]
	tmp |= (Config->PSize<<11);
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	691b      	ldr	r3, [r3, #16]
 8000220:	02db      	lsls	r3, r3, #11
 8000222:	697a      	ldr	r2, [r7, #20]
 8000224:	4313      	orrs	r3, r2
 8000226:	617b      	str	r3, [r7, #20]
	tmp |= (Config->MSize<<13);
 8000228:	68bb      	ldr	r3, [r7, #8]
 800022a:	68db      	ldr	r3, [r3, #12]
 800022c:	035b      	lsls	r3, r3, #13
 800022e:	697a      	ldr	r2, [r7, #20]
 8000230:	4313      	orrs	r3, r2
 8000232:	617b      	str	r3, [r7, #20]
	tmp |= (Config->Priority<<16);
 8000234:	68bb      	ldr	r3, [r7, #8]
 8000236:	699b      	ldr	r3, [r3, #24]
 8000238:	041b      	lsls	r3, r3, #16
 800023a:	697a      	ldr	r2, [r7, #20]
 800023c:	4313      	orrs	r3, r2
 800023e:	617b      	str	r3, [r7, #20]
	tmp |= (Config->Channel<<25);
 8000240:	68bb      	ldr	r3, [r7, #8]
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	065b      	lsls	r3, r3, #25
 8000246:	697a      	ldr	r2, [r7, #20]
 8000248:	4313      	orrs	r3, r2
 800024a:	617b      	str	r3, [r7, #20]

	DMAx->Stream[StreamNumber].CR = tmp;
 800024c:	68f9      	ldr	r1, [r7, #12]
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	4613      	mov	r3, r2
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	4413      	add	r3, r2
 8000256:	00db      	lsls	r3, r3, #3
 8000258:	440b      	add	r3, r1
 800025a:	3310      	adds	r3, #16
 800025c:	697a      	ldr	r2, [r7, #20]
 800025e:	601a      	str	r2, [r3, #0]
	DMAx->Stream[StreamNumber].NDTR = Config->NumDaTranfer;
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000264:	68f8      	ldr	r0, [r7, #12]
 8000266:	687a      	ldr	r2, [r7, #4]
 8000268:	4613      	mov	r3, r2
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	4413      	add	r3, r2
 800026e:	00db      	lsls	r3, r3, #3
 8000270:	4403      	add	r3, r0
 8000272:	3314      	adds	r3, #20
 8000274:	6019      	str	r1, [r3, #0]
	DMAx->Stream[StreamNumber].PAR = Config->Source;
 8000276:	68bb      	ldr	r3, [r7, #8]
 8000278:	6819      	ldr	r1, [r3, #0]
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	1c5a      	adds	r2, r3, #1
 8000280:	4613      	mov	r3, r2
 8000282:	005b      	lsls	r3, r3, #1
 8000284:	4413      	add	r3, r2
 8000286:	00db      	lsls	r3, r3, #3
 8000288:	4403      	add	r3, r0
 800028a:	6019      	str	r1, [r3, #0]
	DMAx->Stream[StreamNumber].M0AR = Config->Destination;
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	6859      	ldr	r1, [r3, #4]
 8000290:	68f8      	ldr	r0, [r7, #12]
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	1c5a      	adds	r2, r3, #1
 8000296:	4613      	mov	r3, r2
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	4413      	add	r3, r2
 800029c:	00db      	lsls	r3, r3, #3
 800029e:	4403      	add	r3, r0
 80002a0:	3304      	adds	r3, #4
 80002a2:	6019      	str	r1, [r3, #0]
}
 80002a4:	bf00      	nop
 80002a6:	371c      	adds	r7, #28
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <DMA_Cmd>:

void DMA_Cmd(DMA_TypeDef* DMAx, uint32_t StreamNumber, uint32_t NewState){
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
	if(NewState == ENABLE){
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d114      	bne.n	80002ec <DMA_Cmd+0x3c>
		DMAx->Stream[StreamNumber].CR |= 1<<0;
 80002c2:	68f9      	ldr	r1, [r7, #12]
 80002c4:	68ba      	ldr	r2, [r7, #8]
 80002c6:	4613      	mov	r3, r2
 80002c8:	005b      	lsls	r3, r3, #1
 80002ca:	4413      	add	r3, r2
 80002cc:	00db      	lsls	r3, r3, #3
 80002ce:	440b      	add	r3, r1
 80002d0:	3310      	adds	r3, #16
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f043 0101 	orr.w	r1, r3, #1
 80002d8:	68f8      	ldr	r0, [r7, #12]
 80002da:	68ba      	ldr	r2, [r7, #8]
 80002dc:	4613      	mov	r3, r2
 80002de:	005b      	lsls	r3, r3, #1
 80002e0:	4413      	add	r3, r2
 80002e2:	00db      	lsls	r3, r3, #3
 80002e4:	4403      	add	r3, r0
 80002e6:	3310      	adds	r3, #16
 80002e8:	6019      	str	r1, [r3, #0]
	}else{
		DMAx->Stream[StreamNumber].CR &= ~(1<<0);
	}
}
 80002ea:	e013      	b.n	8000314 <DMA_Cmd+0x64>
		DMAx->Stream[StreamNumber].CR &= ~(1<<0);
 80002ec:	68f9      	ldr	r1, [r7, #12]
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	4613      	mov	r3, r2
 80002f2:	005b      	lsls	r3, r3, #1
 80002f4:	4413      	add	r3, r2
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	440b      	add	r3, r1
 80002fa:	3310      	adds	r3, #16
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f023 0101 	bic.w	r1, r3, #1
 8000302:	68f8      	ldr	r0, [r7, #12]
 8000304:	68ba      	ldr	r2, [r7, #8]
 8000306:	4613      	mov	r3, r2
 8000308:	005b      	lsls	r3, r3, #1
 800030a:	4413      	add	r3, r2
 800030c:	00db      	lsls	r3, r3, #3
 800030e:	4403      	add	r3, r0
 8000310:	3310      	adds	r3, #16
 8000312:	6019      	str	r1, [r3, #0]
}
 8000314:	bf00      	nop
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr

08000320 <GPIO_Init>:
#ifndef INC_GPIO_H
#define INC_GPIO_H

#include "gpio.h"

void GPIO_Init(GPIO_TypeDef* GPIOx, uint32_t Pinx, uint32_t Mode, uint32_t Otype, uint32_t Speed, uint32_t PuPd){
 8000320:	b480      	push	{r7}
 8000322:	b087      	sub	sp, #28
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
 800032c:	603b      	str	r3, [r7, #0]
	uint32_t pinpos = 0;
 800032e:	2300      	movs	r3, #0
 8000330:	617b      	str	r3, [r7, #20]
	for(pinpos = 0; pinpos <  15; ++pinpos){
 8000332:	2300      	movs	r3, #0
 8000334:	617b      	str	r3, [r7, #20]
 8000336:	e05d      	b.n	80003f4 <GPIO_Init+0xd4>
		if((Pinx&(1<<pinpos)) != 0){
 8000338:	2201      	movs	r2, #1
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	fa02 f303 	lsl.w	r3, r2, r3
 8000340:	461a      	mov	r2, r3
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	4013      	ands	r3, r2
 8000346:	2b00      	cmp	r3, #0
 8000348:	d051      	beq.n	80003ee <GPIO_Init+0xce>
			GPIOx->MODER &= ~(3<<(pinpos*2));
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	697a      	ldr	r2, [r7, #20]
 8000350:	0052      	lsls	r2, r2, #1
 8000352:	2103      	movs	r1, #3
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	43d2      	mvns	r2, r2
 800035a:	401a      	ands	r2, r3
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	601a      	str	r2, [r3, #0]
			GPIOx->MODER |= Mode<<(pinpos*2);
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	681a      	ldr	r2, [r3, #0]
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	005b      	lsls	r3, r3, #1
 8000368:	6879      	ldr	r1, [r7, #4]
 800036a:	fa01 f303 	lsl.w	r3, r1, r3
 800036e:	431a      	orrs	r2, r3
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	601a      	str	r2, [r3, #0]

			GPIOx->OTYPER &= ~(1<<pinpos);
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	685b      	ldr	r3, [r3, #4]
 8000378:	2101      	movs	r1, #1
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	fa01 f202 	lsl.w	r2, r1, r2
 8000380:	43d2      	mvns	r2, r2
 8000382:	401a      	ands	r2, r3
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	605a      	str	r2, [r3, #4]
			GPIOx->OTYPER |= Otype<<pinpos;
 8000388:	68fb      	ldr	r3, [r7, #12]
 800038a:	685a      	ldr	r2, [r3, #4]
 800038c:	6839      	ldr	r1, [r7, #0]
 800038e:	697b      	ldr	r3, [r7, #20]
 8000390:	fa01 f303 	lsl.w	r3, r1, r3
 8000394:	431a      	orrs	r2, r3
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	605a      	str	r2, [r3, #4]

			GPIOx->OSPEEDR &= ~(3<<(pinpos*2));
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	697a      	ldr	r2, [r7, #20]
 80003a0:	0052      	lsls	r2, r2, #1
 80003a2:	2103      	movs	r1, #3
 80003a4:	fa01 f202 	lsl.w	r2, r1, r2
 80003a8:	43d2      	mvns	r2, r2
 80003aa:	401a      	ands	r2, r3
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	609a      	str	r2, [r3, #8]
			GPIOx->OSPEEDR |= Speed<<(pinpos*2);
 80003b0:	68fb      	ldr	r3, [r7, #12]
 80003b2:	689a      	ldr	r2, [r3, #8]
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	005b      	lsls	r3, r3, #1
 80003b8:	6a39      	ldr	r1, [r7, #32]
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	431a      	orrs	r2, r3
 80003c0:	68fb      	ldr	r3, [r7, #12]
 80003c2:	609a      	str	r2, [r3, #8]

			GPIOx->PUPDR &= ~(3<<(pinpos*2));
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	68db      	ldr	r3, [r3, #12]
 80003c8:	697a      	ldr	r2, [r7, #20]
 80003ca:	0052      	lsls	r2, r2, #1
 80003cc:	2103      	movs	r1, #3
 80003ce:	fa01 f202 	lsl.w	r2, r1, r2
 80003d2:	43d2      	mvns	r2, r2
 80003d4:	401a      	ands	r2, r3
 80003d6:	68fb      	ldr	r3, [r7, #12]
 80003d8:	60da      	str	r2, [r3, #12]
			GPIOx->PUPDR |= PuPd<<(pinpos*2);
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	68da      	ldr	r2, [r3, #12]
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	005b      	lsls	r3, r3, #1
 80003e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80003e4:	fa01 f303 	lsl.w	r3, r1, r3
 80003e8:	431a      	orrs	r2, r3
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	60da      	str	r2, [r3, #12]
	for(pinpos = 0; pinpos <  15; ++pinpos){
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	3301      	adds	r3, #1
 80003f2:	617b      	str	r3, [r7, #20]
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	2b0e      	cmp	r3, #14
 80003f8:	d99e      	bls.n	8000338 <GPIO_Init+0x18>
		}
	}
}
 80003fa:	bf00      	nop
 80003fc:	bf00      	nop
 80003fe:	371c      	adds	r7, #28
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <ReadDataPin>:
		}
	}
}


uint8_t ReadDataPin(GPIO_TypeDef* GPIOx, uint32_t Pinx){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
 8000410:	6039      	str	r1, [r7, #0]
	if(((GPIOx->IDR)&(Pinx)) == Pinx) return 1;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	691a      	ldr	r2, [r3, #16]
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	4013      	ands	r3, r2
 800041a:	683a      	ldr	r2, [r7, #0]
 800041c:	429a      	cmp	r2, r3
 800041e:	d101      	bne.n	8000424 <ReadDataPin+0x1c>
 8000420:	2301      	movs	r3, #1
 8000422:	e000      	b.n	8000426 <ReadDataPin+0x1e>
	return 0;
 8000424:	2300      	movs	r3, #0
}
 8000426:	4618      	mov	r0, r3
 8000428:	370c      	adds	r7, #12
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr

08000432 <TogglePin>:
void WriteDataPort(GPIO_TypeDef* GPIOx, uint32_t NewState){
	GPIOx->ODR = NewState;
}


void TogglePin(GPIO_TypeDef* GPIOx, uint32_t Pinx){
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	6039      	str	r1, [r7, #0]
	GPIOx->ODR ^= Pinx;
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	695a      	ldr	r2, [r3, #20]
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	405a      	eors	r2, r3
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	615a      	str	r2, [r3, #20]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <HSE_Config>:
/*
 *	SYSCLK 168MHz
 *	PCLK1: 42MHz	+ TIMx: 84MHz
 *	PCLK2: 84MHz	+ TIMx: 168MHz
 */
void HSE_Config(uint32_t PLL_M, uint32_t PLL_N, uint32_t PLL_P, uint32_t PLL_Q){
 8000454:	b480      	push	{r7}
 8000456:	b085      	sub	sp, #20
 8000458:	af00      	add	r7, sp, #0
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	60b9      	str	r1, [r7, #8]
 800045e:	607a      	str	r2, [r7, #4]
 8000460:	603b      	str	r3, [r7, #0]
	//Enable HSE
	RCC->CR |= 1<<16;
 8000462:	4b31      	ldr	r3, [pc, #196]	; (8000528 <HSE_Config+0xd4>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	4a30      	ldr	r2, [pc, #192]	; (8000528 <HSE_Config+0xd4>)
 8000468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800046c:	6013      	str	r3, [r2, #0]
	//Wait till the HSE flag is ready
	while((RCC->CR&(1<<17)) == RESET){};
 800046e:	bf00      	nop
 8000470:	4b2d      	ldr	r3, [pc, #180]	; (8000528 <HSE_Config+0xd4>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000478:	2b00      	cmp	r3, #0
 800047a:	d0f9      	beq.n	8000470 <HSE_Config+0x1c>
	//Disable PLL
	RCC->CR &= ~(1<<24|1<<25);
 800047c:	4b2a      	ldr	r3, [pc, #168]	; (8000528 <HSE_Config+0xd4>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a29      	ldr	r2, [pc, #164]	; (8000528 <HSE_Config+0xd4>)
 8000482:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000486:	6013      	str	r3, [r2, #0]

	RCC->CFGR |= 6<<29;
 8000488:	4b27      	ldr	r3, [pc, #156]	; (8000528 <HSE_Config+0xd4>)
 800048a:	689b      	ldr	r3, [r3, #8]
 800048c:	4a26      	ldr	r2, [pc, #152]	; (8000528 <HSE_Config+0xd4>)
 800048e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8000492:	6093      	str	r3, [r2, #8]

	//Configuration PLL
	RCC->PLLCFGR = (PLL_M<<0) | (PLL_N<<6) | (PLL_P<<16) | (1<<22) | (PLL_Q<<24);
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	019a      	lsls	r2, r3, #6
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	431a      	orrs	r2, r3
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	041b      	lsls	r3, r3, #16
 80004a0:	431a      	orrs	r2, r3
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	061b      	lsls	r3, r3, #24
 80004a6:	4313      	orrs	r3, r2
 80004a8:	4a1f      	ldr	r2, [pc, #124]	; (8000528 <HSE_Config+0xd4>)
 80004aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004ae:	6053      	str	r3, [r2, #4]
	//AHB prescaler: Not div
	RCC->CFGR &= ~(0xF<<4);
 80004b0:	4b1d      	ldr	r3, [pc, #116]	; (8000528 <HSE_Config+0xd4>)
 80004b2:	689b      	ldr	r3, [r3, #8]
 80004b4:	4a1c      	ldr	r2, [pc, #112]	; (8000528 <HSE_Config+0xd4>)
 80004b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80004ba:	6093      	str	r3, [r2, #8]
	//APB Low speed prescaler (APB1): div by 4
	RCC->CFGR |= 5<<10;
 80004bc:	4b1a      	ldr	r3, [pc, #104]	; (8000528 <HSE_Config+0xd4>)
 80004be:	689b      	ldr	r3, [r3, #8]
 80004c0:	4a19      	ldr	r2, [pc, #100]	; (8000528 <HSE_Config+0xd4>)
 80004c2:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80004c6:	6093      	str	r3, [r2, #8]
	//APB high-speed prescaler (APB2): div by 2
	RCC->CFGR |= 4<<13;
 80004c8:	4b17      	ldr	r3, [pc, #92]	; (8000528 <HSE_Config+0xd4>)
 80004ca:	689b      	ldr	r3, [r3, #8]
 80004cc:	4a16      	ldr	r2, [pc, #88]	; (8000528 <HSE_Config+0xd4>)
 80004ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004d2:	6093      	str	r3, [r2, #8]
	//Latency + Prefetch enable + Instruction cache is enabled + Data cache is enabled
	FLASH->ACR |= (5<<0) | (1<<8) | (1<<9) | (1<<10);
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <HSE_Config+0xd8>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a14      	ldr	r2, [pc, #80]	; (800052c <HSE_Config+0xd8>)
 80004da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80004de:	f043 0305 	orr.w	r3, r3, #5
 80004e2:	6013      	str	r3, [r2, #0]
	//Enable PLL
	RCC->CR |= 1<<24;
 80004e4:	4b10      	ldr	r3, [pc, #64]	; (8000528 <HSE_Config+0xd4>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0f      	ldr	r2, [pc, #60]	; (8000528 <HSE_Config+0xd4>)
 80004ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80004ee:	6013      	str	r3, [r2, #0]
	//Wait till the PLL flag is ready
	while((RCC->CR&(1<<25)) == RESET){};
 80004f0:	bf00      	nop
 80004f2:	4b0d      	ldr	r3, [pc, #52]	; (8000528 <HSE_Config+0xd4>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d0f9      	beq.n	80004f2 <HSE_Config+0x9e>
	//System clock switch: PLL selected as system clock
	RCC->CFGR |= 2<<0;
 80004fe:	4b0a      	ldr	r3, [pc, #40]	; (8000528 <HSE_Config+0xd4>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <HSE_Config+0xd4>)
 8000504:	f043 0302 	orr.w	r3, r3, #2
 8000508:	6093      	str	r3, [r2, #8]
	//Wait till the PLL used as the system clock
	while((RCC->CFGR&0x3) != 0x2){};
 800050a:	bf00      	nop
 800050c:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HSE_Config+0xd4>)
 800050e:	689b      	ldr	r3, [r3, #8]
 8000510:	f003 0303 	and.w	r3, r3, #3
 8000514:	2b02      	cmp	r3, #2
 8000516:	d1f9      	bne.n	800050c <HSE_Config+0xb8>

}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3714      	adds	r7, #20
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40023800 	.word	0x40023800
 800052c:	40023c00 	.word	0x40023c00

08000530 <RCC_PERIPH_Config>:
 * |					|																				|
 *  ****************************************************************************************************
 *
 */

void RCC_PERIPH_Config(uint32_t Source, uint32_t Periph_Name, uint32_t NewState){
 8000530:	b480      	push	{r7}
 8000532:	b087      	sub	sp, #28
 8000534:	af00      	add	r7, sp, #0
 8000536:	60f8      	str	r0, [r7, #12]
 8000538:	60b9      	str	r1, [r7, #8]
 800053a:	607a      	str	r2, [r7, #4]
	uint32_t tmp;
	tmp = (RCC_BASE_ADDR + Source);
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000542:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
 8000546:	617b      	str	r3, [r7, #20]
	if(NewState){
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d006      	beq.n	800055c <RCC_PERIPH_Config+0x2c>
		*((uint32_t*)(tmp)) |= Periph_Name;
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	6819      	ldr	r1, [r3, #0]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	68ba      	ldr	r2, [r7, #8]
 8000556:	430a      	orrs	r2, r1
 8000558:	601a      	str	r2, [r3, #0]
	}else{
		*((uint32_t*)(tmp)) &= ~Periph_Name;
	}
}
 800055a:	e006      	b.n	800056a <RCC_PERIPH_Config+0x3a>
		*((uint32_t*)(tmp)) &= ~Periph_Name;
 800055c:	697b      	ldr	r3, [r7, #20]
 800055e:	6819      	ldr	r1, [r3, #0]
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	43da      	mvns	r2, r3
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	400a      	ands	r2, r1
 8000568:	601a      	str	r2, [r3, #0]
}
 800056a:	bf00      	nop
 800056c:	371c      	adds	r7, #28
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <DMA_CONFIG>:
uint16_t m1 = 0;
uint16_t m2 = 0;
uint32_t tmp[3];
void DMA_CONFIG(void);

void DMA_CONFIG(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
	DMA_Config dma;
	RCC_PERIPH_Config(RCC_AHB1ENR, CLOCK_DMA2, ENABLE);
 800057e:	2201      	movs	r2, #1
 8000580:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000584:	2030      	movs	r0, #48	; 0x30
 8000586:	f7ff ffd3 	bl	8000530 <RCC_PERIPH_Config>
	dma.Source = (uint32_t)&m1;
 800058a:	4b11      	ldr	r3, [pc, #68]	; (80005d0 <DMA_CONFIG+0x58>)
 800058c:	603b      	str	r3, [r7, #0]
	dma.Destination = (uint32_t)&m2;
 800058e:	4b11      	ldr	r3, [pc, #68]	; (80005d4 <DMA_CONFIG+0x5c>)
 8000590:	607b      	str	r3, [r7, #4]
	dma.NumDaTranfer = 1;
 8000592:	2301      	movs	r3, #1
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
	dma.Channel = Channel_0;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
	dma.Dir = Dir_MemToMem;
 800059a:	2302      	movs	r3, #2
 800059c:	60bb      	str	r3, [r7, #8]
	dma.MSize = Size_HalfWord;
 800059e:	2301      	movs	r3, #1
 80005a0:	60fb      	str	r3, [r7, #12]
	dma.PSize = Size_HalfWord;
 80005a2:	2301      	movs	r3, #1
 80005a4:	613b      	str	r3, [r7, #16]
	dma.Priority = Priority_High;
 80005a6:	2302      	movs	r3, #2
 80005a8:	61bb      	str	r3, [r7, #24]
	dma.ModeCircular = Circular_EN;
 80005aa:	2301      	movs	r3, #1
 80005ac:	61fb      	str	r3, [r7, #28]
	dma.FlowController = Controller_By_DMA;
 80005ae:	2300      	movs	r3, #0
 80005b0:	623b      	str	r3, [r7, #32]
	DMA_Init(DMA2, &dma, Stream_0);
 80005b2:	463b      	mov	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	4619      	mov	r1, r3
 80005b8:	4807      	ldr	r0, [pc, #28]	; (80005d8 <DMA_CONFIG+0x60>)
 80005ba:	f7ff fe15 	bl	80001e8 <DMA_Init>
	DMA_Cmd(DMA2, Stream_0, ENABLE);
 80005be:	2201      	movs	r2, #1
 80005c0:	2100      	movs	r1, #0
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <DMA_CONFIG+0x60>)
 80005c4:	f7ff fe74 	bl	80002b0 <DMA_Cmd>
}
 80005c8:	bf00      	nop
 80005ca:	3728      	adds	r7, #40	; 0x28
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000001c 	.word	0x2000001c
 80005d4:	2000001e 	.word	0x2000001e
 80005d8:	40026400 	.word	0x40026400

080005dc <main>:
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af02      	add	r7, sp, #8

	HSE_Config(4, 168, 2, 4);
 80005e2:	2304      	movs	r3, #4
 80005e4:	2202      	movs	r2, #2
 80005e6:	21a8      	movs	r1, #168	; 0xa8
 80005e8:	2004      	movs	r0, #4
 80005ea:	f7ff ff33 	bl	8000454 <HSE_Config>

	RCC_PERIPH_Config(RCC_AHB1ENR, CLOCK_GPIOA|CLOCK_GPIOE, ENABLE);
 80005ee:	2201      	movs	r2, #1
 80005f0:	2111      	movs	r1, #17
 80005f2:	2030      	movs	r0, #48	; 0x30
 80005f4:	f7ff ff9c 	bl	8000530 <RCC_PERIPH_Config>
	RCC_PERIPH_Config(RCC_APB1ENR, CLOCK_SPI2|CLOCK_TIM4, ENABLE);
 80005f8:	2201      	movs	r2, #1
 80005fa:	f244 0104 	movw	r1, #16388	; 0x4004
 80005fe:	2040      	movs	r0, #64	; 0x40
 8000600:	f7ff ff96 	bl	8000530 <RCC_PERIPH_Config>
	RCC_PERIPH_Config(RCC_APB2ENR, CLOCK_SDIO|CLOCK_TIM1, ENABLE);
 8000604:	2201      	movs	r2, #1
 8000606:	f640 0101 	movw	r1, #2049	; 0x801
 800060a:	2044      	movs	r0, #68	; 0x44
 800060c:	f7ff ff90 	bl	8000530 <RCC_PERIPH_Config>
	GPIO_Init(GPIOA, GPIO_Pin_6|GPIO_Pin_7, MODER_OUT, OTYPER_PP, OSPEEDR_H, PUPDR_PU);
 8000610:	2301      	movs	r3, #1
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2302      	movs	r3, #2
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2300      	movs	r3, #0
 800061a:	2201      	movs	r2, #1
 800061c:	21c0      	movs	r1, #192	; 0xc0
 800061e:	481a      	ldr	r0, [pc, #104]	; (8000688 <main+0xac>)
 8000620:	f7ff fe7e 	bl	8000320 <GPIO_Init>
	GPIOA->ODR &= ~(1<<6);
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <main+0xac>)
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <main+0xac>)
 800062a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800062e:	6153      	str	r3, [r2, #20]
	GPIOA->ODR |= 1<<7;
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <main+0xac>)
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <main+0xac>)
 8000636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800063a:	6153      	str	r3, [r2, #20]
	GPIO_Init(GPIOE, GPIO_Pin_3|GPIO_Pin_4, MODER_IN, OTYPER_PP, OSPEEDR_H, PUPDR_PU);
 800063c:	2301      	movs	r3, #1
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2302      	movs	r3, #2
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	2300      	movs	r3, #0
 8000646:	2200      	movs	r2, #0
 8000648:	2118      	movs	r1, #24
 800064a:	4810      	ldr	r0, [pc, #64]	; (800068c <main+0xb0>)
 800064c:	f7ff fe68 	bl	8000320 <GPIO_Init>
	DMA_CONFIG();
 8000650:	f7ff ff92 	bl	8000578 <DMA_CONFIG>


 	while(1){
 		if(ReadDataPin(GPIOE, GPIO_Pin_3)==0){
 8000654:	2108      	movs	r1, #8
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <main+0xb0>)
 8000658:	f7ff fed6 	bl	8000408 <ReadDataPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d1f8      	bne.n	8000654 <main+0x78>
 			while(ReadDataPin(GPIOE, GPIO_Pin_3)==0);
 8000662:	bf00      	nop
 8000664:	2108      	movs	r1, #8
 8000666:	4809      	ldr	r0, [pc, #36]	; (800068c <main+0xb0>)
 8000668:	f7ff fece 	bl	8000408 <ReadDataPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0f8      	beq.n	8000664 <main+0x88>
 			TogglePin(GPIOA, GPIO_Pin_6 | GPIO_Pin_7);
 8000672:	21c0      	movs	r1, #192	; 0xc0
 8000674:	4804      	ldr	r0, [pc, #16]	; (8000688 <main+0xac>)
 8000676:	f7ff fedc 	bl	8000432 <TogglePin>
 			m1++;
 800067a:	4b05      	ldr	r3, [pc, #20]	; (8000690 <main+0xb4>)
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	3301      	adds	r3, #1
 8000680:	b29a      	uxth	r2, r3
 8000682:	4b03      	ldr	r3, [pc, #12]	; (8000690 <main+0xb4>)
 8000684:	801a      	strh	r2, [r3, #0]
 		if(ReadDataPin(GPIOE, GPIO_Pin_3)==0){
 8000686:	e7e5      	b.n	8000654 <main+0x78>
 8000688:	40020000 	.word	0x40020000
 800068c:	40021000 	.word	0x40021000
 8000690:	2000001c 	.word	0x2000001c

08000694 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000694:	480d      	ldr	r0, [pc, #52]	; (80006cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000696:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000698:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800069c:	480c      	ldr	r0, [pc, #48]	; (80006d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800069e:	490d      	ldr	r1, [pc, #52]	; (80006d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a0:	4a0d      	ldr	r2, [pc, #52]	; (80006d8 <LoopForever+0xe>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b4:	4c0a      	ldr	r4, [pc, #40]	; (80006e0 <LoopForever+0x16>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006c2:	f000 f811 	bl	80006e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006c6:	f7ff ff89 	bl	80005dc <main>

080006ca <LoopForever>:

LoopForever:
  b LoopForever
 80006ca:	e7fe      	b.n	80006ca <LoopForever>
  ldr   r0, =_estack
 80006cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006d8:	08000750 	.word	0x08000750
  ldr r2, =_sbss
 80006dc:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006e0:	20000020 	.word	0x20000020

080006e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC_IRQHandler>
	...

080006e8 <__libc_init_array>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	4d0d      	ldr	r5, [pc, #52]	; (8000720 <__libc_init_array+0x38>)
 80006ec:	4c0d      	ldr	r4, [pc, #52]	; (8000724 <__libc_init_array+0x3c>)
 80006ee:	1b64      	subs	r4, r4, r5
 80006f0:	10a4      	asrs	r4, r4, #2
 80006f2:	2600      	movs	r6, #0
 80006f4:	42a6      	cmp	r6, r4
 80006f6:	d109      	bne.n	800070c <__libc_init_array+0x24>
 80006f8:	4d0b      	ldr	r5, [pc, #44]	; (8000728 <__libc_init_array+0x40>)
 80006fa:	4c0c      	ldr	r4, [pc, #48]	; (800072c <__libc_init_array+0x44>)
 80006fc:	f000 f818 	bl	8000730 <_init>
 8000700:	1b64      	subs	r4, r4, r5
 8000702:	10a4      	asrs	r4, r4, #2
 8000704:	2600      	movs	r6, #0
 8000706:	42a6      	cmp	r6, r4
 8000708:	d105      	bne.n	8000716 <__libc_init_array+0x2e>
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000710:	4798      	blx	r3
 8000712:	3601      	adds	r6, #1
 8000714:	e7ee      	b.n	80006f4 <__libc_init_array+0xc>
 8000716:	f855 3b04 	ldr.w	r3, [r5], #4
 800071a:	4798      	blx	r3
 800071c:	3601      	adds	r6, #1
 800071e:	e7f2      	b.n	8000706 <__libc_init_array+0x1e>
 8000720:	08000748 	.word	0x08000748
 8000724:	08000748 	.word	0x08000748
 8000728:	08000748 	.word	0x08000748
 800072c:	0800074c 	.word	0x0800074c

08000730 <_init>:
 8000730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000732:	bf00      	nop
 8000734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000736:	bc08      	pop	{r3}
 8000738:	469e      	mov	lr, r3
 800073a:	4770      	bx	lr

0800073c <_fini>:
 800073c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800073e:	bf00      	nop
 8000740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000742:	bc08      	pop	{r3}
 8000744:	469e      	mov	lr, r3
 8000746:	4770      	bx	lr
